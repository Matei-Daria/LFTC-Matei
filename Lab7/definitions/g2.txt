nonterminals: program letter digit nondigit special string number relationalop logicalop arithmeticop conditionop identifier intconst arrayints operand reparrayints stringconst basictype arraytype arraysegmentation consttype type declvar decllist repdecllist expression rhs condition simplstmt structstmt stmt stmtlist repstmtlist returnstmt assignchoice assignstmt iooperation iostmt elsestmt inside ifstmt whilestmt
terminals: [ ] { } A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 _ # ^ < <= == /= >= > & | ! + - * / int str list const : ; if else in out return = while " ,
starting_symbol: program
productions:
program -> { decllist stmtlist }
letter -> A || B || C || D || E || F || G || H || I || J || K || L || M || N || O || P || Q || R || S || T || U || V || W || X || Y || Z || a || b || c || d || e || f || g || h || i || j || k || l || m || n || o || p || q || r || s || t || u || v || w || x || y || z
digit -> 0 || 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9
nondigit -> 1 || 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9
special -> _ || # || ^
string -> letter string || special string || epsilon
number -> digit number || epsilon
relationalop -> < || <= || == || /= || >= || >
logicalop -> & || | || !
arithmeticop -> + || - || * || /
conditionop -> relationalop || logicalop
identifier -> letter string
operand -> identifier arraysegmentation || intconst
arraysegmentation -> [ operand ] || epsilon
intconst -> 0 || nondigit number
arrayints -> [ intconst reparrayints ]
reparrayints -> , intconst reparrayints || epsilon
stringconst -> " string "
basictype -> int || str
arraytype -> list int
consttype -> const basictype
type -> basictype || arraytype || consttype
declvar -> type : identifier ;
decllist -> declvar repdecllist
repdecllist -> declvar repdecllist || epsilon
expression -> operand rhs
rhs -> arithmeticop operand rhs || epsilon
condition -> operand conditionop operand
simplstmt -> assignstmt || iostmt || returnstmt
structstmt -> ifstmt || whilestmt
stmt -> simplstmt ; || structstmt ;
stmtlist -> stmt repstmtlist
repstmtlist -> stmt repstmtlist || epsilon
returnstmt -> return
assignchoice -> arrayints || stringconst || expression
assignstmt -> identifier = assignchoice
iooperation -> in : || out :
iostmt -> iooperation operand
inside -> { stmtlist }
elsestmt -> else inside || epsilon
ifstmt -> if : condition inside elsestmt
whilestmt -> while : condition inside
